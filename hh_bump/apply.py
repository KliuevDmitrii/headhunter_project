import random
import time
import requests

from hh_bump.api import HHApi
from hh_bump.config import Settings
from hh_bump.notifier import TelegramNotifier
from hh_bump.auth import get_stored_access_token, refresh_access_token


def main():
    s = Settings()
    notifier = TelegramNotifier()

    # --- —Ç–æ–∫–µ–Ω ---
    try:
        token = get_stored_access_token()
        if not token:
            token = refresh_access_token(
                s.oauth_token_url, s.client_id, s.client_secret, s.refresh_token
            )

        api = HHApi(s.api_base, token)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        resp = requests.get(
            f"{s.api_base}/me", headers={"Authorization": f"Bearer {token}"}, timeout=15
        )
        if resp.status_code == 401:
            token = refresh_access_token(
                s.oauth_token_url, s.client_id, s.client_secret, s.refresh_token
            )
            api = HHApi(s.api_base, token)
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}"
        print(msg)
        notifier.send(msg)
        return

    # --- —Ä–µ–∑—é–º–µ ---
    resumes = api.get_my_resumes()
    if not resumes:
        msg = "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ–∑—é–º–µ."
        print(msg)
        notifier.send(msg)
        return

    total_applied = 0
    errors = 0
    searches_done = 0
    applied_vacancies = []

    for text in s.apply_search_texts:
        print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–∞: ¬´{text}¬ª")

        for area in s.apply_areas:
            for page in range(s.apply_max_pages):
                if searches_done >= s.max_searches_per_run:
                    print(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ({s.max_searches_per_run})")
                    break

                try:
                    vacancies = api.search_vacancies(
                        text=text,
                        area=area,
                        per_page=s.apply_per_page,
                        page=page,
                    )
                    searches_done += 1
                except Exception as e:
                    errors += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ [{text}, area={area}, page={page}]: {e}")
                    continue

                if not vacancies:
                    break  # –¥–∞–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç

                for v in vacancies:
                    if total_applied >= s.max_applications_per_run:
                        print(f"‚èπ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ ({s.max_applications_per_run})")
                        break

                    vacancy_id = v["id"]
                    vacancy_name = v.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    employer = v.get("employer", {}).get("name", "")

                    resume_id = random.choice(s.resume_ids)
                    cover_letter = random.choice(s.cover_letters) if s.cover_letters else None

                    try:
                        result = api.apply_to_vacancy(vacancy_id, resume_id, cover_letter)
                        if result is None:
                            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–∞ ¬´{vacancy_name}¬ª –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ API")
                            continue

                        total_applied += 1
                        applied_vacancies.append((vacancy_name, employer))
                        msg = f"‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ¬´{vacancy_name}¬ª ({employer})"
                        print(msg)
                        notifier.send(msg)

                        time.sleep(s.sleep_between_applies)
                    except requests.HTTPError as e:
                        if e.response.status_code == 404:
                            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –≤–∞–∫–∞–Ω—Å–∏—è {vacancy_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (404)")
                        else:
                            errors += 1
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ ¬´{vacancy_name}¬ª: {e}")
                    except Exception as e:
                        errors += 1
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ ¬´{vacancy_name}¬ª: {e}")

    # --- –∏—Ç–æ–≥–∏ ---
    if applied_vacancies:
        summary = "üìã –ò—Ç–æ–≥ –ø–æ –æ—Ç–∫–ª–∏–∫–∞–º:\n" + "\n".join(
            [f"- {name} ({emp})" for name, emp in applied_vacancies]
        )
        notifier.send(summary)
    else:
        msg = "‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        print(msg)
        notifier.send(msg)

    if errors:
        msg = f"‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–∞—Ö: {errors}"
        print(msg)
        notifier.send(msg)


if __name__ == "__main__":
    main()



