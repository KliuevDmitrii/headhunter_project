import random
import time
from hh_bump.api import HHApi
from hh_bump.config import Settings
from hh_bump.notifier import TelegramNotifier


def main():
    s = Settings()
    api = HHApi(s.api_base, s.access_token)
    notifier = TelegramNotifier()

    resumes = api.get_my_resumes()
    if not resumes:
        msg = "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ–∑—é–º–µ."
        print(msg)
        notifier.send(msg)
        return

    total_applied = 0
    errors = 0
    searches_done = 0
    applied_vacancies = []  # –¥–ª—è –æ—Ç—á—ë—Ç–∞

    for text in s.apply_search_texts:
        if searches_done >= s.max_searches_per_run:
            print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ({s.max_searches_per_run}) –∑–∞ –∑–∞–ø—É—Å–∫")
            break

        try:
            vacancies = api.search_vacancies(
                text=text,
                areas=s.apply_areas,
                per_page=s.apply_per_page,
            )
            searches_done += 1
        except Exception as e:
            errors += 1
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            continue

        if not vacancies:
            print(f"‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ¬´{text}¬ª (—Ä–µ–≥–∏–æ–Ω—ã {','.join(map(str, s.apply_areas))})")
            continue

        for v in vacancies:
            if total_applied >= s.max_applications_per_run:
                print(f"‚èπ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ ({s.max_applications_per_run}) –∑–∞ –∑–∞–ø—É—Å–∫")
                break

            vacancy_id = v["id"]
            vacancy_name = v.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            employer = v.get("employer", {}).get("name", "")

            resume_id = random.choice(s.resume_ids)
            cover_letter = random.choice(s.cover_letters) if s.cover_letters else None

            try:
                result = api.apply_to_vacancy(vacancy_id, resume_id, cover_letter)
                if result is None:
                    # –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ action
                    continue

                total_applied += 1
                applied_vacancies.append((vacancy_name, employer))
                msg = f"‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ¬´{vacancy_name}¬ª ({employer})"
                print(msg)
                notifier.send(msg)

                time.sleep(s.sleep_between_applies)
            except Exception as e:
                errors += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ ¬´{vacancy_name}¬ª: {e}")

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    if applied_vacancies:
        summary = "üìã –ò—Ç–æ–≥ –ø–æ –æ—Ç–∫–ª–∏–∫–∞–º:\n" + "\n".join(
            [f"- {name} ({emp})" for name, emp in applied_vacancies]
        )
        notifier.send(summary)
    else:
        msg = "‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        print(msg)
        notifier.send(msg)

    if errors:
        msg = f"‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–∞—Ö: {errors}"
        print(msg)
        notifier.send(msg)


if __name__ == "__main__":
    main()

