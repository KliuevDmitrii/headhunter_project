import random
import time
import requests
import csv
from datetime import datetime
from pathlib import Path

from hh_bump.api import HHApi
from hh_bump.config import Settings
from hh_bump.notifier import TelegramNotifier
from hh_bump.auth import get_stored_access_token, refresh_access_token


def main():
    s = Settings()
    notifier = TelegramNotifier()

    # --- —Ç–æ–∫–µ–Ω ---
    try:
        token = get_stored_access_token()
        if not token:
            token = refresh_access_token(
                s.oauth_token_url, s.client_id, s.client_secret, s.refresh_token
            )

        api = HHApi(s.api_base, token)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        resp = requests.get(
            f"{s.api_base}/me", headers={"Authorization": f"Bearer {token}"}, timeout=15
        )
        if resp.status_code == 401:
            token = refresh_access_token(
                s.oauth_token_url, s.client_id, s.client_secret, s.refresh_token
            )
            api = HHApi(s.api_base, token)
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}"
        print(msg)
        notifier.send(msg)
        return

    # --- —Ä–µ–∑—é–º–µ ---
    resumes = api.get_my_resumes()
    if not resumes:
        msg = "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ–∑—é–º–µ."
        print(msg)
        notifier.send(msg)
        return

    total_applied = 0
    skipped = 0
    errors = 0
    searches_done = 0
    vacancies_seen = 0
    applied_vacancies = []
    all_vacancies_log = []

    # --- –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–∫–ª–∏–∫–æ–≤ ---
    for text in s.apply_search_texts:
        print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–∞: ¬´{text}¬ª")

        for area in s.apply_areas:
            for page in range(s.apply_max_pages):
                if searches_done >= s.max_searches_per_run:
                    print(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ({s.max_searches_per_run})")
                    break

                try:
                    vacancies = api.search_vacancies(
                        text=text,
                        area=area,
                        per_page=s.apply_per_page,
                        page=page,
                    )
                    searches_done += 1
                except Exception as e:
                    errors += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ [{text}, area={area}, page={page}]: {e}")
                    continue

                if not vacancies:
                    break

                vacancies_seen += len(vacancies)

                for v in vacancies:
                    vacancy_id = v["id"]
                    vacancy_name = v.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    employer = v.get("employer", {}).get("name", "")
                    vacancy_url = f"https://hh.ru/vacancy/{vacancy_id}"

                    status = "–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
                    all_vacancies_log.append([vacancy_name, employer, vacancy_url, text, area, status])

                    if total_applied >= s.max_applications_per_run:
                        print(f"‚èπ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ ({s.max_applications_per_run})")
                        break

                    resume_id = random.choice(s.resume_ids)
                    cover_letter = random.choice(s.cover_letters) if s.cover_letters else None

                    try:
                        result = api.apply_to_vacancy(vacancy_id, resume_id, cover_letter)
                        if result is None:
                            skipped += 1
                            status = "–Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ API"
                            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–∞ ¬´{vacancy_name}¬ª –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ API")
                            continue

                        total_applied += 1
                        status = "–æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                        applied_vacancies.append((vacancy_name, employer))
                        print(f"‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ¬´{vacancy_name}¬ª ({employer})")

                        time.sleep(s.sleep_between_applies)

                    except requests.HTTPError as e:
                        if e.response.status_code == 404:
                            skipped += 1
                            status = "–≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (404)"
                            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –≤–∞–∫–∞–Ω—Å–∏—è {vacancy_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (404)")
                        else:
                            errors += 1
                            status = f"–æ—à–∏–±–∫–∞ HTTP {e.response.status_code}"
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ ¬´{vacancy_name}¬ª: {e}")
                    except Exception as e:
                        errors += 1
                        status = f"–æ—à–∏–±–∫–∞ {type(e).__name__}"
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ ¬´{vacancy_name}¬ª: {e}")

                    all_vacancies_log[-1][-1] = status

    # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º CSV ---
    try:
        out_dir = Path("hh_bump/logs")
        out_dir.mkdir(parents=True, exist_ok=True)
        csv_path = out_dir / "found_vacancies.csv"

        # üßπ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        if csv_path.exists():
            csv_path.unlink()

        # üíæ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π CSV
        with open(csv_path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–º–ø–∞–Ω–∏—è", "–°—Å—ã–ª–∫–∞", "–ö–ª—é—á", "–†–µ–≥–∏–æ–Ω", "–°—Ç–∞—Ç—É—Å"])
            writer.writerows(all_vacancies_log)

        print(f"üíæ –í–∞–∫–∞–Ω—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_path}")
        notifier.send_file(csv_path, caption="üíæ –û—Ç—á—ë—Ç –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤–∞–∫–∞–Ω—Å–∏—è–º (–∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏)")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")

    # --- –∏—Ç–æ–≥ ---
    summary_parts = [
        f"üîé –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {searches_done}",
        f"üìë –í–∞–∫–∞–Ω—Å–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {vacancies_seen}",
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤: {total_applied}",
        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {skipped}",
        f"‚ùå –û—à–∏–±–æ–∫: {errors}",
    ]

    if applied_vacancies:
        summary_parts.append("\nüìã –û—Ç–∫–ª–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:")
        summary_parts.extend([f"- {name} ({emp})" for name, emp in applied_vacancies])

    final_summary = "\n".join(summary_parts)
    print(final_summary)
    notifier.send(final_summary)


if __name__ == "__main__":
    main()

